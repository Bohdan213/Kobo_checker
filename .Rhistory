non_check <- kobo_data.t %>%
rownames_to_column(var='rownames') %>%
select(rownames,list_name,constraint) %>%
rowwise() %>%
mutate(check = any(grepl('none', kobo_data.c[kobo_data.c$list_name %in% list_name,]$name))) %>%
ungroup() %>%
mutate(check2 = grepl('none',constraint)) %>%
filter(check==T & check2==F)
if(nrow(non_check)>0){
non_check <- non_check %>%
select(rownames,constraint) %>%
rename(value=constraint) %>%
mutate(column = 'constraint',
issue = 'None is present in the list_name for the variable, but not in the constraint',
file = 'tool.survey')%>%
mutate(priority = 'Second priority')
}else{non_check <- data.frame()}
# Check if the names match the labels (at least somewhat)
label_issues <- kobo_data.c %>%
tibble() %>%
rownames_to_column(var='rownames') %>%
select(list_name,rownames,name,!!sym(labels)) %>%
mutate(name = tolower(gsub('_',' ',name)),
label = tolower(gsub('_',' ',!!sym(labels))),
label = gsub("\\(.*?\\)", "", label),
label = gsub("[[:punct:]]", "", label),
similarity = stringsim(
name,label,
method='jaccard',
q=2
)) %>%
rowwise() %>%
filter(similarity<0.2 & ! grepl(name,label) & !name=='idk') %>% ungroup()
if(nrow(label_issues)>0){
label_issues <- label_issues %>%
mutate(issue = paste0('The name "',name,'" is dissimlar to the label "',!!sym(labels),'". Please double check'),
column = labels,
value = !!sym(labels),
file = 'tool.choices') %>%
select(rownames,column,value,issue,file) %>%
mutate(priority = 'Second priority')
}else{label_issues <- data.frame()}
processed_data <- bind_rows(other_checks,add.space,non_eng,check_rel,check_con,
dupl_choices,check_con,check_rel,non_check,label_issues) %>%
relocate(file) %>%
mutate(rownames = as.numeric(rownames)+1)
if(all(is.na(processed_data$cyrillic_char))){
processed_data <- processed_data %>% select(-cyrillic_char)
}
output$resultTable <- renderDT({
processed_data
})
}
})
}
# Run the app
shinyApp(ui, server)
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
library(shiny); runApp('Kobo_checker.R')
help(selectizeInput)
library(shiny); runApp('Kobo_checker.R')
help(updateSelectizeInput)
runApp('Kobo_checker.R')
help(sidebarLayout)
runApp('Kobo_checker.R')
help(mainPanel)
runApp('Kobo_checker.R')
help(fluidPage)
help(tabsetPanel)
help(tabPanel)
library(shiny); runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
help(datatable)
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
data.frame(a = c(1:5),b=c('a\nb','a\nb\c',))
data.frame(a = c(1:5),b=c('a\nb','a\nb\c',))
data.frame(a = c(1:5),b=c('a\nb','a\nb\c','a','b\nc',))
data.frame(a = c(1:5),b=c('a\nb','a\nb\c','a','b\nc','a'))
data.frame(a = c(1:5),b=c('a\nb','a\nb\c','a','b\nc','a'))
data.frame(a = c(1:5),b=c('a\nb','a\nb\nc','a','b\nc','a'))
tdata.frame(a = c(1:5),b=c('a\nb','a\nb\nc','a','b\nc','a'))
t <- data.frame(a = c(1:5),b=c('a\nb','a\nb\nc','a','b\nc','a'))
t
cat(t)
print(t)
tibble(t)
writexl::write_xlsx(t,'C:/Users/reach/Desktop/testo.xlsx')
diffr::diffr('C:/Users/reach/Desktop/Git/Kobo_checker/Kobo_checker.R','C:/Users/reach/Desktop/Kobo_checker.R')
diffr::diffr('C:/Users/reach/Desktop/Git/Kobo_checker/Kobo_checker.R','C:/Users/reach/Desktop/Kobo_checker.R')
diffr::diffr('C:/Users/reach/Desktop/Git/Kobo_checker/Kobo_checker.R','C:/Users/reach/Desktop/Kobo_checker.R')
library(shiny); runApp('Kobo_checker.R')
library(utilityR)
library(dplyr)
kobo_data.c <- load.tool.choices('C:/Users/reach/Desktop/Git/cleaning_template/resources/MSNA_2023_Questionnaire_Final_CATI_cleaned.xlsx','label::English')
kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('\\bsettlement|\\brectangle\\b|\\brectangles\\b|geo_location|\\bpoint\\b|\\bhub\\b|raion|hromada|oblast',list_name),
grepl("^UKRs\\d+$", name),
grepl("^UA\\d+$", name))
library(tidyr)
kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('\\bsettlement|\\brectangle\\b|\\brectangles\\b|geo_location|\\bpoint\\b|\\bhub\\b|raion|hromada|oblast',list_name),
grepl("^UKRs\\d+$", name),
grepl("^UA\\d+$", name))
help(rownames_to_column)
library(tibble)
kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('\\bsettlement|\\brectangle\\b|\\brectangles\\b|geo_location|\\bpoint\\b|\\bhub\\b|raion|hromada|oblast',list_name),
grepl("^UKRs\\d+$", name),
grepl("^UA\\d+$", name))
View(kobo_data.c)
kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('raion|hromada|oblast',list_name),
grepl("^UKRs\\d+$", name),
grepl("^UA\\d+$", name))
grepl('raion|hromada|oblast',kobo_data$list_name[1])
grepl('raion|hromada|oblast',kobo_data.c$list_name[1])
kobo_data.c$list_name[1]
kobo_data.c$list_name[30000]
kobo_data.c$list_name[3300]
grepl('raion|hromada|oblast|settlement',kobo_data.c$list_name[3300])
kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('raion|hromada|oblast',list_name),
grepl("^UKRs\\d+$", name),
grepl("^UA\\d+$", name))
kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('raion|hromada|oblast',list_name))
kobo_data.c.geo <- kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(grepl('raion|hromada|oblast',list_name))
kobo_data.c.geo %>%
filter(grepl('^UA',name))
kobo_data.c.geo %>%
filter(!grepl('^UA',name))
wrong_geo_entries <- kobo_data.c.geo %>%
filter(!grepl('^UA',name))
if(nrow(wrong_geo_entries)>0){wrong_geo_entries <- wrong_geo_entries %>% mutate(issue = 'cyrillic',
file = 'tool.survey')}
wrong_geo_entries
kobo_data.c %>%
select(list_name,!!sym(labels),name,rownames) %>%
pivot_longer(cols= list_name:name, names_to = 'column', values_to = 'value') %>%
filter(!is.na(value),
!value==' ',
!grepl('\xc2\xa0+',value),
grepl("[^ -~]",value, perl=T)) %>%
rowwise() %>%
mutate(cyrillic_char = regmatches(value,
gregexpr("[^ -~]",
value, perl = TRUE)) %>%unlist  %>%  paste(collapse = '')) %>%
filter(!grepl('\\`|\\’|\\–|\\´',cyrillic_char ))
kobo_data.c %>%
select(list_name,`label::English`,name,rownames) %>%
pivot_longer(cols= list_name:name, names_to = 'column', values_to = 'value') %>%
filter(!is.na(value),
!value==' ',
!grepl('\xc2\xa0+',value),
grepl("[^ -~]",value, perl=T)) %>%
rowwise() %>%
mutate(cyrillic_char = regmatches(value,
gregexpr("[^ -~]",
value, perl = TRUE)) %>%unlist  %>%  paste(collapse = '')) %>%
filter(!grepl('\\`|\\’|\\–|\\´',cyrillic_char ))
kobo_data.c
kobo_data.c <- kobo_data.c %>%
rownames_to_column(var='rownames') %>%
filter(!grepl('\\bsettlement|\\brectangle\\b|\\brectangles\\b|geo_location|\\bpoint\\b|\\bhub\\b|raion|hromada|oblast|center_idp',list_name),
!grepl("^UKRs\\d+$", name),
!grepl("^UA\\d+$", name))
kobo_data.c %>%
select(list_name,`label::English`,name,rownames) %>%
pivot_longer(cols= list_name:name, names_to = 'column', values_to = 'value') %>%
filter(!is.na(value),
!value==' ',
!grepl('\xc2\xa0+',value),
grepl("[^ -~]",value, perl=T)) %>%
rowwise() %>%
mutate(cyrillic_char = regmatches(value,
gregexpr("[^ -~]",
value, perl = TRUE)) %>%unlist  %>%  paste(collapse = '')) %>%
filter(!grepl('\\`|\\’|\\–|\\´',cyrillic_char ))
kobo_data.c.geo %>%
filter(!grepl('^UA',name))
kobo_data.c.geo %>%
select(name,rownames) %>%
filter(!grepl('^UA',name))
kobo_data.c.geo %>%
select(name,rownames) %>%
filter(!grepl('^UA',name)) %>%
mutate(column = 'name') %>%
rename(value = name)
# test if all geo names are p codes
wrong_geo_entries <- kobo_data.c.geo %>%
select(name,rownames) %>%
filter(!grepl('^UA',name)) %>%
mutate(column = 'name') %>%
rename(value = name)
library(shiny); runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
kobo_data.t <- kobo_data.t %>%
rownames_to_column(var='rownames')
kobo_data.c <- kobo_data.c %>%
rownames_to_column(var='rownames')
kobo_data.t
kobo_data.t %>%
select(rownames, starts_with('label::'))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>% names()
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(starts_with('label::')))>0)
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(.))>0)
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0)
runApp('Kobo_checker.R')
kobo_data.t <- kobo_data.t %>%
rownames_to_column(var='rownames')
kobo_data.c <- kobo_data.c %>%
rownames_to_column(var='rownames')
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0)
View(kobo_data.t)
runApp('C:/Users/reach/Desktop/Git/Reach_QDB/shiny_13_final_updates.R')
runApp('Kobo_checker.R')
kobo_data.t <- kobo_data.t %>%
rownames_to_column(var='rownames')
kobo_data.c <- kobo_data.c %>%
rownames_to_column(var='rownames')
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0)
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(~ any(is.na(.)))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
select_if(~ any(is.na(.)))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0)
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(~ any(is.na(.)))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(~ any(is.na(.)),rownames)
kobo_data.t %>%
select(row_names(), starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(~ any(is.na(.)))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(function(x){any(is.na(x))})
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(function(x){any(is.na(x)) | names(col)='rownames'})
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(function(x){any(is.na(x)) | names(col)=='rownames'})
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(rownames,select_if(function(x){any(is.na(x))}))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select_if(function(x){any(is.na(x))})
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(one_of("rownames", names(.)[colSums(is.na(.)) > 0]))
help(one_of)
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of("rownames", names(.)[colSums(is.na(.)) > 0]))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(one_of("rownames", names(.)[colSums(is.na(.)) > 0]))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0]))) %>%
pivot_longer(select(.,starts_with('label::')), names_to = 'column',values_to = 'value')
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0]))) %>%
pivot_longer(cols=select(.,starts_with('label::')) %>% names(), names_to = 'column',values_to = 'value')
kobo_data.t %>%
select(name, relevant,type,rownames) %>%
pivot_longer(cols= name:type, names_to = 'column', values_to = 'value') %>%
filter(!is.na(value),
!value==' ',
!grepl('\xc2\xa0+',value),
grepl("[^ -~]",value, perl=T)) %>%
mutate(cyrillic_char = regmatches(value,
gregexpr("[^ -~]",
value, perl = TRUE)) %>%unlist  %>%  paste(collapse = ''))
kobo_data.t[1:100,] %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0]))) %>%
pivot_longer(cols=select(.,starts_with('label::')) %>% names(), names_to = 'column',values_to = 'value')
kobo_data.t[1:100,] %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0)
kobo_data.t[1:100,] %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
kobo_data.t[1:100,] %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
labels_check.c <- kobo_data.c %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
labels_check.c
kobo_data.c %>%
select(rownames, starts_with('label::'))
labels_check.c <- kobo_data.c %>%
select(rownames, starts_with('label::'))
View(kobo_data.c)
runApp('Kobo_checker.R')
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
kobo_data.c %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
kobo_data.t %>%
select(rownames, starts_with('label::'))
kobo_data.c %>%
select(rownames, starts_with('label::'))
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
kobo_data.t %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
kobo_data.c %>%
select(rownames, starts_with('label::')) %>%
filter(rowSums(is.na(select(., starts_with('label::')))) < ncol(select(., starts_with('label::')))) %>%
filter(rowSums(is.na(.))>0) %>%
select(any_of(c("rownames", names(.)[colSums(is.na(.)) > 0])))
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
help("pivot_wider")
library(mapview)
library(sf)
admin_boundary <- sf::st_read(dsn = 'C:/Users/reach/Desktop/Git/cleaning_template/resources/UKR_ADM4_2020.geojson')
admin_boundary_lim <- admin_boundary[admin_boundary$admin4Pcode=='4806001015',]
excel_file <- readxl::read_excel('C:/Users/reach/Downloads/CP_test_15_04_1_gps_checks_CP_test_15_04.xlsx')
admin_boundary_lim <- admin_boundary[admin_boundary$admin4Pcode==settlement_issue,]
excel_file_lim <- excel_file[excel_file$q1_4_1_1_1_settlement_list==settlement_issue,]
settlement_issue <- '4806001015'
admin_boundary_lim <- admin_boundary[admin_boundary$admin4Pcode==settlement_issue,]
excel_file_lim <- excel_file[excel_file$q1_4_1_1_1_settlement_list==settlement_issue,]
excel_file_lim
admin_boundary_lim
settlement_issue <- 'UA4806001015'
admin_boundary_lim <- admin_boundary[admin_boundary$admin4Pcode==settlement_issue,]
excel_file_lim <- excel_file[excel_file$q1_4_1_1_1_settlement_list==settlement_issue,]
admin_boundary_lim
excel_file_lim
admin_boundary_lim <- admin_boundary[admin_boundary$admin4Pcode%in%settlement_issue,]
excel_file_lim <- excel_file[excel_file$q1_4_1_1_1_settlement_list%in%settlement_issue,]
library(dplyr)
library(tidyr)
excel_file_lim
View(excel_file_lim)
excel_file_lim %>% tidyr::separate(q14_2_gps, into = c('lonngitude','latitude','altitue','accuracy'),sep=' ')
excel_file_lim <-excel_file_lim %>% tidyr::separate(q14_2_gps, into = c('lonngitude','latitude','altitue','accuracy'),sep=' ')
data <- data.frame(longitude=excel_file_lim$lonngitude, latitude=excel_file_lim$latitude)
data
data_geo <- sf::st_as_sf(data, coords = c("longitude", "latitude"),  crs = 4326)
mapview::mapview(admin_boundary_lim)+data_geo
excel_file_lim <- excel_file[excel_file$q1_4_1_1_1_settlement_list%in%settlement_issue,]
excel_file_lim <-excel_file_lim %>% tidyr::separate(q14_2_gps, into = c('latitude','longitude','altitue','accuracy'),sep=' ')
data <- data.frame(longitude=excel_file_lim$longitude, latitude=excel_file_lim$latitude)
data_geo <- sf::st_as_sf(data, coords = c("longitude", "latitude"),  crs = 4326)
mapview::mapview(admin_boundary_lim)+data_geo
library(shiny); runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
help(read_xlsx)
help(read.xlsx)
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
runApp('Kobo_checker.R')
kobo_data.t
kobo_data.t %>%
filter(type=='text') %>%
filter(!is.na(relevant)) %>%
select(name,relevant,rownames) %>%
mutate(single_rel = relevant) %>%
tidyr::separate_rows(single_rel,sep='\\bor\\b|\\band\\b') %>%
mutate(single_rel=str_squish(single_rel)) %>%
filter(!grepl('not\\(selected',single_rel)) %>%
mutate(n_relevancies=str_count(relevant,'\\{'),
questions_values = sapply(single_rel, parse.formula),
question_names = sapply(single_rel, function(x){parse.formula(x,return='name')})) %>%
filter(grepl('other',questions_values))
# check for _other variables
other_check <- kobo_data.t %>%
filter(type=='text') %>%
filter(!is.na(relevant)) %>%
select(name,relevant,rownames) %>%
mutate(single_rel = relevant) %>%
tidyr::separate_rows(single_rel,sep='\\bor\\b|\\band\\b') %>%
mutate(single_rel=str_squish(single_rel)) %>%
filter(!grepl('not\\(selected',single_rel)) %>%
mutate(n_relevancies=str_count(relevant,'\\{'),
questions_values = sapply(single_rel, parse.formula),
question_names = sapply(single_rel, function(x){parse.formula(x,return='name')})) %>%
filter(grepl('other',questions_values))
View(other_check)
# check for _other variables
other_check <- kobo_data.t %>%
filter(type=='text') %>%
filter(!is.na(relevant)) %>%
select(name,relevant,rownames) %>%
mutate(single_rel = relevant) %>%
tidyr::separate_rows(single_rel,sep='\\bor\\b|\\band\\b') %>%
mutate(single_rel=str_squish(single_rel)) %>%
filter(!grepl('not\\(selected',single_rel)) %>%
mutate(n_relevancies=str_count(relevant,'{'),
questions_values = sapply(single_rel, parse.formula),
question_names = sapply(single_rel, function(x){parse.formula(x,return='name')})) %>%
filter(grepl('other',questions_values))
help(str_count)
str_count("selected(${a2_2_building_type}, 'other')",'\\{')
str_count("(selected(${enum_id}, 'other')",'\\{')
# check for _other variables
other_check <- kobo_data.t %>%
filter(type=='text') %>%
filter(!is.na(relevant)) %>%
select(name,relevant,rownames) %>%
mutate(single_rel = relevant) %>%
tidyr::separate_rows(single_rel,sep='\\bor\\b|\\band\\b') %>%
mutate(single_rel=str_squish(single_rel)) %>%
filter(!grepl('not\\(selected',single_rel)) %>%
mutate(n_relevancies=str_count(relevant,'\\{'),
questions_values = sapply(single_rel, parse.formula),
question_names = sapply(single_rel, function(x){parse.formula(x,return='name')})) %>%
filter(grepl('other',questions_values))
runApp('Kobo_checker.R')
