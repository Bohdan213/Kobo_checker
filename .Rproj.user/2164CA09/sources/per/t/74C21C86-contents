library(shiny)
library(tidyverse)
library(utilityR)
library(readxl)

input_string <- "selected(${interview_type},'msna_f2f')"

parse.formula <- function(input_string,return='value') {
  pattern_names <- "\\$\\{([^\\}]+)\\}"
  pattern_values <- "'(.*?)'"
  conditions <- gregexpr("\\b(and|or)\\b", input_string, ignore.case = TRUE)
  conditions <- regmatches(input_string, conditions)[[1]]
  questions_values <- gsub("'", "", str_extract_all(input_string, pattern_values)[[1]])
  questions_names <- gsub("\\$\\{|\\}", "", str_extract_all(input_string, pattern_names)[[1]])
  if(return=='name'){
    return(questions_names)
  }else{
    return(questions_values)
  }
}



ui <- fluidPage(
  titlePanel("Data Processing App"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Choose your kobo tool", accept = ".xlsx"),
      actionButton("processBtn", "Process Data")
    ),
    mainPanel(
      tableOutput("resultTable")
    )
  )
)

# Server
server <- function(input, output, session) {
  # Reactive values for storing data
  data.tool <- reactiveVal(NULL)
  data.choices <- reactiveVal(NULL)
  
  # Load data from file
  observeEvent(input$file, {
    data.tool( readxl::read_xlsx(input$file$datapath, sheet = "survey", 
                                 col_types = "text"))
    data.choices( readxl::read_xlsx(input$file$datapath, sheet = "choices", 
                                    col_types = "text"))
  })
  
  # Process data and update table
  observeEvent(input$processBtn, {
    if (!is.null(data())) {
      kobo_data.t <- data.tool()
      kobo_data.c <- data.choices()
      
      label <- names(kobo_data.c)[grepl('english',tolower(names(kobo_data.c)))][1]
      
      
      # test for non eng in tool survey
      non_eng.t <- kobo_data.t %>% 
        select(name, relevant,type) %>% 
        rownames_to_column(var='rownames') %>% 
        pivot_longer(cols= name:type, names_to = 'column', values_to = 'value') %>% 
        filter(!is.na(value),
               !value==' ',
               !grepl('\xc2\xa0+',value),
               grepl("[^ -~]",value, perl=T)) %>% 
        mutate(cyrillic_char = regmatches(value, 
                                          gregexpr("[^ -~]", 
                                                   value, perl = TRUE)) %>%unlist  %>%  paste(collapse = '')) 
      
      if(nrow(non_eng.t)>0){non_eng.t <- non_eng.t %>% mutate(issue = 'cyrillic',
                                                              file = 'tool.survey')}
      
      # test for non eng in tool survey
      non_eng.c <- kobo_data.c %>% 
        select(list_name,!!sym(label),name) %>% 
        rownames_to_column(var='rownames') %>% 
        pivot_longer(cols= list_name:name, names_to = 'column', values_to = 'value') %>% 
        filter(!is.na(value),
               !value==' ',
               !grepl('\xc2\xa0+',value),
               grepl("[^ -~]",value, perl=T)) %>% 
        rowwise() %>% 
        mutate(cyrillic_char = regmatches(value, 
                                          gregexpr("[^ -~]", 
                                                   value, perl = TRUE)) %>%unlist  %>%  paste(collapse = '')) %>% 
        filter(!grepl('\\`|\\’|\\–|\\´',cyrillic_char ))
      
      if(nrow(non_eng.c)>0){non_eng.c <- non_eng.c %>% mutate(issue = 'cyrillic',
                                                              file = 'tool.choices')}
      
      non_eng <- bind_rows(non_eng.c,non_eng.t)
      
      # test for leading/trailing spaces in tool survey
      add.space.t <- kobo_data.t %>% 
        select(name) %>% 
        rownames_to_column(var='rownames') %>% 
        rename(value=name) %>% 
        filter(!is.na(value),
               !value==' ',
               grepl("^\\s+|\\s+$|\\s{2,}",value, perl=T))
      
      if(nrow(add.space.t)>0){add.space.t <- add.space.t %>% mutate(issue = 'double/leading/trailing space',
                                                                    file = 'tool.survey')}
      
      
      # test for leading/trailing spaces in tool survey
      add.space.c <- kobo_data.c %>% 
        filter(!grepl('geo',list_name)) %>% 
        select(name,!!sym(label)) %>% 
        rownames_to_column(var='rownames') %>% 
        pivot_longer(cols= name:!!sym(label), names_to = 'column', values_to = 'value') %>% 
        filter(!is.na(value),
               !value==' ',
               grepl("^\\s+|\\s+$|\\s{2,}",value, perl=T))
      
      if(nrow(add.space.c)>0){add.space.c <- add.space.c %>% mutate(issue = 'double/leading/trailing space',
                                                                    file = 'tool.choices')}
      
      add.space <- bind_rows(add.space.c,add.space.t)
      
      
      # check for _other variables
      other_check <- kobo_data.t %>% 
        filter(type=='text') %>% 
        filter(!is.na(relevant)) %>% 
        select(name,relevant) %>% 
        rownames_to_column(var='rownames') %>% 
        mutate(single_rel = relevant) %>% 
        tidyr::separate_rows(single_rel,sep='\\bor|\\band') %>% 
        mutate(single_rel=str_squish(single_rel)) %>% 
        filter(!grepl('not\\(selected',single_rel)) %>% 
        mutate(n_relevancies=str_count(relevant,'\\{'),
               questions_values = sapply(single_rel, parse.formula),
               question_names = sapply(single_rel, function(x){parse.formula(x,return='name')})) %>% 
        filter(grepl('other',questions_values))
      
      other_check_n_others <- other_check %>% 
        group_by(question_names) %>% 
        mutate(count_others = sum(n())) %>% 
        filter(count_others>1) %>% 
        select(rownames,name,relevant)%>% 
        rename(value = relevant) %>% 
        mutate(issue = 'Two others per 1 question. Pls fix',
               file = 'tool.survey')
      
      
      other_n_rel <- other_check %>% filter(n_relevancies>1) %>% 
        select(rownames,name,relevant) %>% 
        rename(value = relevant) %>% 
        mutate(issue = 'Double relevancy',
               file = 'tool.survey')
      
      other_wrong_choice <- other_check %>% filter(!questions_values=='other') %>% 
        select(rownames,name,relevant) %>% 
        rename(value = relevant) %>% 
        mutate(issue = 'Other choice is not called "other"',
               file = 'tool.survey')
      
      other_wrong_name <- other_check %>% filter(!grepl('_other$',name)) %>% 
        select(rownames,name,relevant) %>% 
        rename(value = relevant,
               column = name) %>% 
        mutate(issue = "The name of this 'other' value doesn't end with '_other' this will break the cleaning script",
               file = 'tool.survey')
      
      other_checks <- bind_rows(other_n_rel,other_wrong_choice,other_wrong_name,other_check_n_others)
      
      
      # check if all relevances match to what we have per 
      
      check_rel <- kobo_data.t %>% 
        rownames_to_column(var='rownames') %>% 
        select(name, type, relevant,constraint) %>% 
        mutate(single_rel = relevant) %>% 
        separate('type',sep=' ', into = c('type','list_name')) %>% 
        tidyr::separate_rows(single_rel,sep='\\bor|\\band') %>% 
        filter(!is.na(relevant)&is.na(constraint)) %>% 
        mutate(questions_values = sapply(single_rel, parse.formula),
               question_names = sapply(single_rel, function(x){parse.formula(x,return='name')}))
      
      
      
      
      
      processed_data <- bind_rows(other_checks,add.space,non_eng) %>% 
        relocate(file)
      
      
      output$resultTable <- renderTable({
        processed_data
      })
    }
  })
  
}

# Run the app
shinyApp(ui, server)